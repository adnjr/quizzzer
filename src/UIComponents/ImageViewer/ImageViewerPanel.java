package UIComponents.ImageViewer;

import DBObjects.ImageIconInfo;
import ErrorService.ErrorService;
import UIComponents.DirectorPublisher;
import UIComponents.DirectorSubscriber;
import UIComponents.UISettings;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashSet;
import java.util.Set;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.WindowConstants;
import javax.swing.border.Border;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Armando
 */
public final class ImageViewerPanel extends javax.swing.JPanel implements DirectorPublisher {
    private Set<DirectorSubscriber> subscribers;
    private final PanelListener panelListener;
    private final ErrorService errorService = ErrorService.getService();
    private String courseTitle;
    private String questionText;
    
    public static final int EVENT_CANCEL = 0;
    public static final int EVENT_IMAGE_CHOSEN = 1;
    public static final int EVENT_DELETE_IMAGE = 2;
    public static final int EVENT_ADD_IMAGE = 3;
    public static final int EVENT_EDIT_IMAGE = 4;
    
    private final Border enabledBorder = UISettings.enabledBorder;
    private final Border disabledBorder = UISettings.disabledBorder;
    private final Border eMainBorder = BorderFactory.createTitledBorder(
                enabledBorder, "Image Viewer");
    private final Border dMainBorder = BorderFactory.createTitledBorder(
                disabledBorder, "Image Viewer");
    public static final int IMAGES_NOTHING = -1;
    public static final int IMAGES_NEW_QUESTION = 0;
    public static final int IMAGES_EXISTING = 1;
    public static final int IMAGES_SELECTION = 2;
    
    public ImageViewerPanel(DirectorSubscriber subscriber) {
        if (subscriber == null)
            throw new IllegalArgumentException("An image viewer panel must have a subscriber.");
        this.subscribers = new HashSet<>();
        this.subscribers.add(subscriber);
        this.courseTitle = null;
        this.questionText = null;
        this.panelListener = new PanelListener();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelMain = new javax.swing.JPanel();
        scrollPaneImages = new javax.swing.JScrollPane();
        listImages = new javax.swing.JList();
        labelImagesAssociated = new javax.swing.JLabel();
        scrollPaneImageViewer = new javax.swing.JScrollPane();
        labelImageViewer = new LabelImageViewer();
        buttonEditImage = new javax.swing.JButton();
        buttonDeleteImage = new javax.swing.JButton();
        buttonSelectImage = new javax.swing.JButton();
        buttonViewImage = new javax.swing.JButton();
        buttonCancel = new javax.swing.JButton();
        buttonAdd = new javax.swing.JButton();

        panelMain.setBorder(javax.swing.BorderFactory.createTitledBorder(disabledBorder, "Image Viewer"));

        listImages.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        listImages.setModel(new ImagesListModel());
        listImages.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listImages.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        listImages.setEnabled(false);
        listImages.setVisibleRowCount(3);
        listImages.addListSelectionListener(panelListener);
        scrollPaneImages.setViewportView(listImages);

        labelImagesAssociated.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        labelImagesAssociated.setText("Images associated with selection");
        labelImagesAssociated.setEnabled(false);

        scrollPaneImageViewer.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrollPaneImageViewer.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        scrollPaneImageViewer.setViewportView(labelImageViewer);

        buttonEditImage.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        buttonEditImage.setText("Edit");
        buttonEditImage.setEnabled(false);
        buttonEditImage.addActionListener(panelListener);

        buttonDeleteImage.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        buttonDeleteImage.setText("Delete");
        buttonDeleteImage.setEnabled(false);
        buttonDeleteImage.addActionListener(panelListener);

        buttonSelectImage.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        buttonSelectImage.setText("Select This Image");
        buttonSelectImage.setVisible(false);
        buttonSelectImage.addActionListener(panelListener);

        buttonViewImage.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        buttonViewImage.setText("View Full Size");
        buttonViewImage.setEnabled(false);
        buttonViewImage.addActionListener(panelListener);

        buttonCancel.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(panelListener);

        buttonAdd.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        buttonAdd.setText("Add");
        buttonAdd.addActionListener(panelListener);

        javax.swing.GroupLayout panelMainLayout = new javax.swing.GroupLayout(panelMain);
        panelMain.setLayout(panelMainLayout);
        panelMainLayout.setHorizontalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addComponent(buttonEditImage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonDeleteImage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonSelectImage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addComponent(buttonViewImage))
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addComponent(labelImagesAssociated)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addComponent(scrollPaneImages, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollPaneImageViewer)))
                .addContainerGap())
        );
        panelMainLayout.setVerticalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelImagesAssociated)
                .addGap(12, 12, 12)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonSelectImage, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonEditImage, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buttonDeleteImage, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buttonViewImage, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPaneImages, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                    .addComponent(scrollPaneImageViewer))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void imagesListChanged() {
        
        labelImageViewer.setIcon(getImage());
        buttonsEnabled(!listImages.isSelectionEmpty());
        
    }
    
    private void editImage() {
        notifySubscribers(EVENT_EDIT_IMAGE);
    }
    
    public void imageEdited(String newCaption) {
        getModel().updateImage(newCaption);
    }
    
    public void imageDeleted(boolean imageWasDeleted) {
        if (imageWasDeleted) {
            getModel().removeImage(getImage().getCaption());
            if (getModel().getSize() == 0)
                clear();
        } else
            reportError("Failed to delete image with ID: "
                    + getImage().getImageID());
    }
    
    private void deleteImage() {
        notifySubscribers(EVENT_DELETE_IMAGE);
    }
    
    private void imageChosen() {
        notifySubscribers(EVENT_IMAGE_CHOSEN);
    }
    
    private void viewFullSize() {
        LabelImageViewer viewerLabel;
        ImageIconInfo imageIcon;
        JFrame viewFrame;
        JLabel viewLabel;
        JScrollPane scrollPane;
        
        if (labelImageViewer.getIcon() == null)
            return;
        
        viewerLabel = (LabelImageViewer)labelImageViewer;
        imageIcon = (ImageIconInfo)viewerLabel.getOriginalIcon();
        viewFrame = new JFrame(imageIcon.getCaption());
        viewLabel = new JLabel();
        scrollPane = new JScrollPane(viewLabel);
        
        viewLabel.setIcon(imageIcon);
        viewFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        viewFrame.getContentPane().add(scrollPane);
        viewFrame.pack();
        viewFrame.setLocationRelativeTo(this);
        viewFrame.setVisible(true);
    }
    
    private void cancel() {
        notifySubscribers(EVENT_CANCEL);
    }
    
    public void clear() {
        panelMain.setEnabled(false);
        labelImageViewer.setEnabled(false);
        labelImagesAssociated.setEnabled(false);
        labelImagesAssociated.setText("No Images");
        buttonDeleteImage.setEnabled(false);
        buttonEditImage.setEnabled(false);
        buttonSelectImage.setVisible(false);
        buttonCancel.setVisible(false);
        listImages.setEnabled(false);
        getModel().removeAllImages();
        labelImageViewer.setIcon(null);
        panelMain.setBorder(javax.swing.BorderFactory.createTitledBorder(disabledBorder, "Image Viewer"));
        this.setEnabled(false);
    }
    
    private void turnOn() {
        
    }
    
    public void setImages(Set<ImageIconInfo> imageIcons, String viewerMessage
            , boolean choosingImage) {
        setImages(imageIcons, viewerMessage, null, null, choosingImage);
    }
    
    public void setAddEnabled(boolean bool) {
        buttonAdd.setEnabled(bool);
    }
    
    public void setImages(Set<ImageIconInfo> imageIcons, String message
            , String courseTitle, String questionText, boolean choosingImage) {
        
        this.courseTitle = courseTitle;
        this.questionText = questionText;
        boolean empty = imageIcons == null || imageIcons.isEmpty();
        panelMain.setBorder(eMainBorder);
        
        // configure button visibility
        buttonEditImage.setVisible(!choosingImage);
        buttonDeleteImage.setVisible(!choosingImage);
        buttonAdd.setVisible(!choosingImage);
        buttonSelectImage.setVisible(choosingImage);
        buttonCancel.setVisible(choosingImage);
        
        // enable/disable components as needed
        labelImageViewer.setEnabled(!empty);
        labelImagesAssociated.setEnabled(!empty);
        listImages.setEnabled(!empty);
        
        // set label to appropriate descriptive message
        labelImagesAssociated.setText((message == null) ? "Hello" : message);
        
        if (empty)
            clear();
        else {
            getModel().removeAllImages();
            getModel().addImages(imageIcons);
            listImages.setSelectedIndex(0);
        }
    }
    
    /** THIS IS NO LONGER VALID JAVADOC. Returns a constant from <code>ImageViewerPanel</code> representing
      * the type of images being viewed, e.g. images of a selected question.
      * @return A constant from <code>ImageViewerPanel</code>: either
      * <code>IMAGES_NOTHING</code>, <code>IMAGES_EXISTING</code>,
      * <code>IMAGES_SELECTION</code>, <code>IMAGES_NEW_QUESTION</code> **/
    public String getCurrentMessage() {
        return labelImagesAssociated.getText();
    }
    
    /** Configures this image viewer panel to allow the user to choose a
     * single image from a list.
     * @param msg The instructional message to display to the user.
     * @param images The images the user has to choose from.
     */
    public void chooseAnImage(String msg, Set<ImageIconInfo> images) {
        setImages(images, msg, true);
    }
    
    private void buttonsEnabled(boolean bool) {
        buttonDeleteImage.setEnabled(bool);
        buttonEditImage.setEnabled(bool);
        buttonViewImage.setEnabled(bool);
    }
    
    public void imageAdded(ImageIconInfo image) {
        getModel().addImage(image);
        labelImageViewer.setEnabled(true);
        labelImagesAssociated.setEnabled(true);
        listImages.setEnabled(true);
        listImages.setSelectedIndex(getModel().getSize()-1);
        turnOn();
    }
    
    /**
     * Returns the currently selected image, or null if no image is selected.
     * @return An image icon, or null of no image is currently selected.
     */
    public ImageIconInfo getImage() {
        ImageIconInfo image;
        int selectedIndex;

        if (getModel().isEmpty() || listImages.isSelectionEmpty())
            return null;
        
        selectedIndex = listImages.getSelectedIndex();
        image = (ImageIconInfo)getModel().getImageAt(selectedIndex);
        
        return image;
    }
    
    public String getCourseTitle() {
        return this.courseTitle;
    }
    
    public String getQuestion() {
        return this.questionText;
    }
    
    private ImagesListModel getModel() {
        return (ImagesListModel)listImages.getModel();
    }
    
    public boolean hasImage() {
        return listImages.getModel().getSize() > 0;
    }
    
    private void reportError(String errorMessage) {
        errorService.reportError(errorMessage);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonDeleteImage;
    private javax.swing.JButton buttonEditImage;
    private javax.swing.JButton buttonSelectImage;
    private javax.swing.JButton buttonViewImage;
    private javax.swing.JLabel labelImageViewer;
    private javax.swing.JLabel labelImagesAssociated;
    private javax.swing.JList listImages;
    private javax.swing.JPanel panelMain;
    private javax.swing.JScrollPane scrollPaneImageViewer;
    private javax.swing.JScrollPane scrollPaneImages;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addSubscriber(DirectorSubscriber subscriber) {
        if (subscriber != null)
            this.subscribers.add(subscriber);
    }

    @Override
    public void notifySubscribers(int eventIndicator) {
        for (DirectorSubscriber subber : subscribers)
            subber.onEvent(this, eventIndicator);
    }
    
    // --------------------------- UI Events ----------------------------------

    private class PanelListener implements ActionListener, ListSelectionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            Object src = e.getSource();
            if (src == buttonEditImage)
                editImage();
            else if (src == buttonDeleteImage)
                deleteImage();
            else if (src == buttonSelectImage)
                imageChosen();
            else if (src == buttonCancel)
                cancel();
            else if (src == buttonViewImage)
                viewFullSize();
            else if (src == buttonAdd)
                notifySubscribers(EVENT_ADD_IMAGE);
        }

        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (e.getSource() == listImages)
                imagesListChanged();
        }
        
    }
}
