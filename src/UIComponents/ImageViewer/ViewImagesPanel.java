/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UIComponents.ImageViewer;

import DBObjects.ImageIconInfo;
import java.awt.Window;
import java.util.Set;
import java.util.SortedSet;
//import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.WindowConstants;

/**
 * This panel allows a set of images to be viewed by choosing their captions
 * from a list.  It is currently set up to be specifically used in a<code>
 * Window</code>, like the {@link ImageViewerDialog} object. Eventually,
 * I can make this panel more customizable, for use in other situations.
 * @author Armando
 * @see ImageViewerDialog
 */
public final class ViewImagesPanel extends javax.swing.JPanel {
    /** The sorted set of image icons this panel is intended to display **/
    private Set<ImageIconInfo> imageIcons;
    /** The parent <code>Window</code> that this ViewImagesPanel belongs to **/
    private final Window parentDialog;
    
    public ViewImagesPanel(Window dialog, Set<ImageIconInfo> imageIcons) {
        this.imageIcons = imageIcons;
        this.parentDialog = dialog;
            
        initComponents();
        
        if (imageIcons != null)
            listImageCaptions.setSelectedIndex(0);
    }
    
    /**
     * Specifies the set of images this <code>ViewImagePanel</code> is intended
     * to display.
     * @param imageIcons A sorted set of <code>ImageIconInfo</code> objects,
     * which extend <code>ImageIcon</code>. **/
    public void setImages(Set<ImageIconInfo> imageIcons) {
        this.imageIcons = imageIcons;
        if (imageIcons != null) {
            listImageCaptions.setModel(new ImagesListModel(imageIcons));
            listImageCaptions.setSelectedIndex(0);
        }
    }
    
    /** 
     * Gets the set of images this <code>ViewImagePanel</code> is displaying.
     * @return A sorted set of <code>ImageIconInfo</code> objects, which
     * extends <code>ImageIcon</code>. **/
    public Set<ImageIconInfo> getImages() {
        return this.imageIcons;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listImageCaptions = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        labelImageViewer = new LabelImageViewer();
        buttonClose = new javax.swing.JButton();
        buttonViewFullSize = new javax.swing.JButton();

        listImageCaptions.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        listImageCaptions.setModel(new ImagesListModel(imageIcons));
        listImageCaptions.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listImageCaptionsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listImageCaptions);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        jLabel1.setText("Images");

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel2.setText("This is for a context-sensitive message.");

        buttonClose.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        buttonClose.setText("Close");
        buttonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCloseActionPerformed(evt);
            }
        });

        buttonViewFullSize.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        buttonViewFullSize.setText("View Full Size");
        buttonViewFullSize.setEnabled(false);
        buttonViewFullSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonViewFullSizeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(buttonClose))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 377, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelImageViewer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonViewFullSize)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(buttonViewFullSize, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelImageViewer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(buttonClose)
                .addContainerGap(21, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the parent <code>Window</code> this <code>ViewImagesPanel</code>
     * belongs to.
     * @param evt The event that triggered this method.
     */
    private void buttonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCloseActionPerformed
        parentDialog.dispose();
    }//GEN-LAST:event_buttonCloseActionPerformed

    /**
     * Listener: Triggered when the selection changes in this
     * <code>ViewerImagesPanel</code>'s list of images. It updates the image
     * viewer label to show the thumbnail of the selected image, or clears it
     * if nothing is selected.
     * @param evt The event that triggered this method.
     */
    private void listImageCaptionsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listImageCaptionsValueChanged
        int selIndex = listImageCaptions.getSelectedIndex();
        if (selIndex != -1) {
            ImagesListModel model = (ImagesListModel)listImageCaptions.getModel();
            labelImageViewer.setIcon((ImageIconInfo)model.getImageAt(selIndex));
            buttonViewFullSize.setEnabled(true);
        }
        
        else {
            labelImageViewer.setIcon(null);
            buttonViewFullSize.setEnabled(false);
        }
    }//GEN-LAST:event_listImageCaptionsValueChanged

    /**
     * Listener: Triggers when the View Full Size button is pressed. This method
     * creates a new <code>JFrame</code> to display the currently displayed
     * image thumbnail in its actual size in a new window.
     * @param evt The event that triggered this method.
     */
    private void buttonViewFullSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonViewFullSizeActionPerformed
        JFrame frame = new JFrame();
//        int selIndex = listImageCaptions.getSelectedIndex();
//        ImagesListModel model = (ImagesListModel)listImageCaptions.getModel();
        LabelImageViewer lbl = (LabelImageViewer)labelImageViewer;
        ImageIconInfo selImage = lbl.getOriginalIcon();
        JScrollPane scrollPane = new JScrollPane(new JLabel(selImage));
        frame.getContentPane().add(scrollPane);
        frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        frame.setTitle(selImage.getCaption());
        frame.pack();
        frame.setLocationRelativeTo(parentDialog);
        frame.setVisible(true);
    }//GEN-LAST:event_buttonViewFullSizeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonClose;
    private javax.swing.JButton buttonViewFullSize;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelImageViewer;
    private javax.swing.JList listImageCaptions;
    // End of variables declaration//GEN-END:variables
}
