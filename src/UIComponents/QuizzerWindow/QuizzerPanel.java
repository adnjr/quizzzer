/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UIComponents.QuizzerWindow;

import DBObjects.Quiz;
import DBObjects.QuizProblem;
import UIComponents.EnhCardLayout;
import DBObjects.ImageIconInfo;
import UIComponents.ImageViewer.LabelImageViewer;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.WindowConstants;
import quizzer.DatabaseInterface;

/**
 *
 * @author Armando
 */
public class QuizzerPanel extends javax.swing.JPanel {
    private JPanel cardsPanel;
    private final Quiz quiz;
    private final QuizzerFrame parentFrame;
//    private GradeReportPanel gradeReportPanel;
    
    private final Font defFont = new Font("Dialog", 0, 21);
    private static final String INT_PROBLEM = "Enter integer, press enter.";
    private static final String FLOAT_PROBLEM = "Enter decimal number, press enter.";
    private static final String TEXT_PROBLEM = "Press enter to submit.";
    private static final String MULT_PROBLEM = "Select answer(s), click Submit.";
    
    public QuizzerPanel(Quiz quiz, QuizzerFrame parentFrame) {
        this.quiz = quiz;
        this.cardsPanel = new JPanel(new EnhCardLayout());
        this.parentFrame = parentFrame;
       
        initComponents(); // note: this does: panelAnswer = cardsPanel
        panelAnswer.setLayout(new EnhCardLayout());
        if (! quiz.getCurrentProblem().getImages().isEmpty()) {
            comboboxImages.setSelectedIndex(0);
            buttonViewInWindow.setEnabled(true);
            comboboxImages.setEnabled(true);
            comboboxImages.setVisible(true);
            labelImage.setEnabled(true);
        }
        initQuizStuff();
    }
    
    public QuizzerPanel() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void initQuizStuff() {
        
        // create a card (panel) for each quiz problem
        for (QuizProblem qProblem : quiz.getProblems()) {
            
            if (qProblem.isMultipleChoice()) {
                
                // multiple answers: use checkboxes
                if (qProblem.getCorrectAnswers().size() > 1)
                    panelAnswer.add(new CheckboxAnswerPanel(qProblem.getChoices(), this));
                
                // multiple choice, single answer: use radio buttons
                else
                    panelAnswer.add(new RadiobuttonAnswerPanel(qProblem.getChoices(), this));
                
            }
            
            // non-multiple-choice: use text field panel
            else
                panelAnswer.add(new SingleAnswerPanel(this));
        }
        
        resetAnswerPanel(quiz.getProblems().get(0));
    }
    
    private void resetAnswerPanel(QuizProblem aProblem) {
//        int probType;
        EnhCardLayout cLayout;
        int index;
        AnswerPanel panel;
        
//        probType = aProblem.getProblemType();
        cLayout = (EnhCardLayout)panelAnswer.getLayout();
        index = cLayout.getIndex();
        panel = (AnswerPanel)panelAnswer.getComponent(index);
        
        // reset labels and submit button
        labelProblemCount.setText((quiz.getIndex()+1) + " / " + quiz.getSize());
        buttonSubmit.setEnabled(panel.hasAnswer());
        
        // display appropriate message
        if (aProblem.isMultipleChoice())
            labelAnswerMsg.setText(MULT_PROBLEM);
        else if (aProblem.isIntegerProblem())
            labelAnswerMsg.setText(INT_PROBLEM);
        else if (aProblem.isFloatProblem())
            labelAnswerMsg.setText(FLOAT_PROBLEM);
        else if (aProblem.isTextProblem())
            labelAnswerMsg.setText(TEXT_PROBLEM);
        
        labelAnswerMsg.setForeground(Color.black);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelMain = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        scrollPaneQuestion = new javax.swing.JScrollPane();
        areaQuestion = new javax.swing.JTextArea();
        labelImage = new javax.swing.JLabel();
        labelAnswerMsg = new javax.swing.JLabel();
        buttonSubmit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        labelImageViewer = new LabelImageViewer();
        labelProblemCount = new javax.swing.JLabel();
        //if (quiz.getCurrentProblem().getProblemType() != DatabaseInterface.MULTIPLECHOICE_PROBLEM)
        panelAnswer = cardsPanel;
        buttonPrevious = new javax.swing.JButton();
        buttonNext = new javax.swing.JButton();
        buttonViewInWindow = new javax.swing.JButton();
        comboboxImages = new javax.swing.JComboBox();

        panelMain.setPreferredSize(new java.awt.Dimension(600, 626));

        jLabel1.setFont(defFont);
        jLabel1.setText("Question");
        jLabel1.setAlignmentX(1.0F);

        scrollPaneQuestion.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        areaQuestion.setEditable(false);
        areaQuestion.setColumns(20);
        areaQuestion.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        areaQuestion.setLineWrap(true);
        areaQuestion.setRows(4);
        areaQuestion.setTabSize(4);
        areaQuestion.setText(quiz.getCurrentProblem().getQuestion());
        areaQuestion.setWrapStyleWord(true);
        areaQuestion.setAlignmentX(1.0F);
        areaQuestion.setMinimumSize(new java.awt.Dimension(0, 60));
        scrollPaneQuestion.setViewportView(areaQuestion);

        labelImage.setFont(defFont);
        labelImage.setText("Image");
        labelImage.setAlignmentX(1.0F);
        labelImage.setEnabled(false);

        labelAnswerMsg.setFont(defFont);
        labelAnswerMsg.setText("Answer");
        labelAnswerMsg.setAlignmentX(1.0F);

        buttonSubmit.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        buttonSubmit.setText("Submit");
        buttonSubmit.setEnabled(false);
        buttonSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSubmitActionPerformed(evt);
            }
        });

        labelImageViewer.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        labelImageViewer.setAlignmentX(1.0F);
        if (! quiz.getCurrentProblem().getImages().isEmpty())
        labelImageViewer.setIcon(quiz.getCurrentProblem().getImages().iterator().next());
        jScrollPane1.setViewportView(labelImageViewer);

        labelProblemCount.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        labelProblemCount.setText("# / #");

        //if (quiz.getCurrentProblem().getProblemType() == DatabaseInterface.MULTIPLECHOICE_PROBLEM && quiz.getCurrentProblem().getCorrectAnswers().size() > 1)
        //    panelAnswer = new CheckboxAnswerPanel(checkboxes);
        //if (quiz.getCurrentProblem().getProblemType() == DatabaseInterface.MULTIPLECHOICE_PROBLEM && quiz.getCurrentProblem().getCorrectAnswers().size() <= 1)
        //    panelAnswer = new RadiobuttonAnswerPanel(radiobuttons);

        javax.swing.GroupLayout panelAnswerLayout = new javax.swing.GroupLayout(panelAnswer);
        panelAnswer.setLayout(panelAnswerLayout);
        panelAnswerLayout.setHorizontalGroup(
            panelAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelAnswerLayout.setVerticalGroup(
            panelAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 174, Short.MAX_VALUE)
        );

        buttonPrevious.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        buttonPrevious.setText("<");
        buttonPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPreviousActionPerformed(evt);
            }
        });

        buttonNext.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        buttonNext.setText(">");
        buttonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNextActionPerformed(evt);
            }
        });

        buttonViewInWindow.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        buttonViewInWindow.setText("View in Window");
        buttonViewInWindow.setEnabled(false);
        buttonViewInWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonViewInWindowActionPerformed(evt);
            }
        });

        comboboxImages.setFont(defFont);
        comboboxImages.setModel(new ImagesComboBoxModel(new TreeSet<>(quiz.getCurrentProblem().getImages())));
        comboboxImages.setEnabled(false);
        comboboxImages.setVisible(false);
        comboboxImages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboboxImagesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelMainLayout = new javax.swing.GroupLayout(panelMain);
        panelMain.setLayout(panelMainLayout);
        panelMainLayout.setHorizontalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(panelAnswer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrollPaneQuestion)
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonPrevious)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonNext)
                        .addGap(18, 18, 18)
                        .addComponent(labelProblemCount, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelMainLayout.createSequentialGroup()
                                .addComponent(labelImage)
                                .addGap(68, 68, 68)
                                .addComponent(comboboxImages, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(labelAnswerMsg))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 123, Short.MAX_VALUE)
                        .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(buttonViewInWindow)
                            .addComponent(buttonSubmit))))
                .addContainerGap())
        );
        panelMainLayout.setVerticalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(labelProblemCount)
                    .addComponent(buttonPrevious, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonNext, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPaneQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelAnswerMsg)
                    .addComponent(buttonSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, Short.MAX_VALUE))
                .addGap(7, 7, 7)
                .addComponent(panelAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboboxImages, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelImage)
                        .addComponent(buttonViewInWindow, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMain, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMain, javax.swing.GroupLayout.DEFAULT_SIZE, 808, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSubmitActionPerformed
        submit(evt);
    }//GEN-LAST:event_buttonSubmitActionPerformed

    private void buttonPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPreviousActionPerformed
        traverseProblems(EnhCardLayout.PREV);
    }//GEN-LAST:event_buttonPreviousActionPerformed

    private void buttonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNextActionPerformed
        traverseProblems(EnhCardLayout.NEXT);
    }//GEN-LAST:event_buttonNextActionPerformed

    private void buttonViewInWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonViewInWindowActionPerformed
        ImageIconInfo imageIcon;
        if (labelImageViewer.getIcon() != null) {

            imageIcon = (ImageIconInfo)
                    ((LabelImageViewer)labelImageViewer).getOriginalIcon();
            JFrame viewFrame = new JFrame(imageIcon.getCaption());
            JLabel viewLabel = new JLabel();
            viewFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
            viewLabel.setIcon(imageIcon);
            JScrollPane scrollPane = new JScrollPane(viewLabel);

            viewFrame.getContentPane().add(scrollPane);
            viewFrame.pack();
            viewFrame.setLocationRelativeTo(parentFrame);
            viewFrame.setVisible(true);
        }
    }//GEN-LAST:event_buttonViewInWindowActionPerformed

    private void comboboxImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboboxImagesActionPerformed
        JComboBox cb = (JComboBox)evt.getSource();
        ImagesComboBoxModel model = (ImagesComboBoxModel)cb.getModel();
        labelImageViewer.setIcon(model.getSelectedImage());
    }//GEN-LAST:event_comboboxImagesActionPerformed

    public void firstProblem () {
        CardLayout cLayout = (CardLayout)panelAnswer.getLayout();
        cLayout.first(panelAnswer);
        quiz.clearAnswers();
        quiz.resetTraversal();
        resetAnswerPanel(quiz.getCurrentProblem());
    }                                              

    private void traverseProblems(int direction) {
        QuizProblem currentProblem = null;
        EnhCardLayout cLayout;
        ImagesComboBoxModel model;
        
        // can't go before beginning of quiz
        if (direction == EnhCardLayout.PREV
                && (currentProblem = quiz.getPreviousProblem()) == null)
            return;
        
        // going past end of quiz, ask user if finished with quiz
        if (direction == EnhCardLayout.NEXT
                && (currentProblem = quiz.getNextProblem()) == null)
            showQuizFinishedDialog();
        
        if (currentProblem == null)
            return;
        
        // display new question and/or image(s)
        areaQuestion.setText(currentProblem.getQuestion());
        model = (ImagesComboBoxModel)comboboxImages.getModel();
        if (! currentProblem.getImages().isEmpty()) {
            
            // clear combo box and load new images; select first image
            if (model.getSize() > 0)
                model.removeAllItems();
            for (ImageIconInfo image : currentProblem.getImages())
                comboboxImages.addItem(image);
            comboboxImages.setSelectedIndex(0);
            comboboxImages.setEnabled(true);
            if (currentProblem.getImages().size() > 1) {
                labelImage.setText("Images:");
                comboboxImages.setVisible(true);
            }
            else {
                labelImage.setText("Image: " + currentProblem.getImages()
                        .iterator().next().getCaption());
                comboboxImages.setVisible(false);
            }
            
            buttonViewInWindow.setEnabled(true);
            labelImage.setEnabled(true);
            labelImageViewer.setEnabled(true);
        }
        else {
            if (model.getSize() > 0)
                model.removeAllItems();
            comboboxImages.setEnabled(false);
            comboboxImages.setVisible(false);
            labelImageViewer.setIcon(null);
            labelImage.setText("Image");
            labelImage.setEnabled(false);
            buttonViewInWindow.setEnabled(false);
            labelImageViewer.setEnabled(false);
        }

        // move to the next/previous card (AnswerPanel)
        cLayout = (EnhCardLayout)panelAnswer.getLayout();
        if (direction == EnhCardLayout.PREV)
            cLayout.previous(panelAnswer);
        else
            cLayout.next(panelAnswer);
        resetAnswerPanel(currentProblem);
    }
    
    private void showQuizFinishedDialog() {
        int n = JOptionPane.showOptionDialog(
                        this
                        , "<html><span style='font-size: 1.8em'>Are you finished taking the quiz?<br>You won't be able to change your answers if you proceed.</span></html>"
                        , "Quiz Completed Confirmation"
                        , JOptionPane.YES_NO_OPTION
                        , JOptionPane.QUESTION_MESSAGE
                        , null
                        , null
                        , null);
                
            // user chose Yes
            if (n == 0)
                parentFrame.showGradeReport();
    }
    
    protected void submit(java.awt.event.ActionEvent evt) {
        QuizProblem currentProblem;
        List<String> userAnswers;
//        int problemType;
        AnswerPanel panel;
        EnhCardLayout cardLayout;
        
        currentProblem = quiz.getCurrentProblem();
        userAnswers = new ArrayList<>();
//        problemType = currentProblem.getProblemType();
        cardLayout = (EnhCardLayout)panelAnswer.getLayout();
        
        // get answer(s)
        panel = (AnswerPanel)panelAnswer.getComponent(cardLayout.getIndex());
        if (panel.hasAnswer())
            userAnswers.addAll(panel.getAnswers());
        
        // validate input and display msg to user
        if (userAnswers.isEmpty())
            labelAnswerMsg.setText("Enter an answer.");
        else {
            try {
                quiz.answerCurrentProblem(userAnswers);
                labelAnswerMsg.setText("Answer submitted.");
            } catch (NumberFormatException e) {
                if (currentProblem.isIntegerProblem())
                    labelAnswerMsg.setText("Not a valid integer.");
                else if (currentProblem.isFloatProblem())
                    labelAnswerMsg.setText("Not a valid float.");
                else
                    labelAnswerMsg.setText("huh?");
            }
        }
        
        labelAnswerMsg.setForeground(Color.red);
//        labelAnswerSubmitted.setVisible(true);
        buttonNext.requestFocusInWindow();
    }
    
    public void setSubmitEnabled(boolean bool) {
        this.buttonSubmit.setEnabled(bool);
    }
    
    private void setImagesComboBox() {
        QuizProblem qProblem = quiz.getCurrentProblem();
        Set<ImageIconInfo> images = qProblem.getImages();
        String[] captionArray = new String[7];
        List<String> captionList = new ArrayList<>();
        for (ImageIconInfo imageIcon : images)
            captionList.add(imageIcon.getCaption());
        captionArray = captionList.toArray(captionArray);
        
        if (comboboxImages == null)
            comboboxImages = new JComboBox(captionArray);
//        else
//            comboboxImages.getModel().;
    }
    
    public void clearAnswers() {
        for (int i = 0; i < panelAnswer.getComponentCount(); i++)
            ((AnswerPanel)panelAnswer.getComponent(i)).clearAnswers();
    }

//    private class ImagesComboBoxListener implements ActionListener {
//
//        @Override
//        public void actionPerformed(ActionEvent e) {
//            JComboBox cb = (JComboBox)e.getSource();
//            ImagesComboBoxModel model = (ImagesComboBoxModel)cb.getModel();
//            labelImageViewer.setIcon(model.getSelectedImage());
//            System.err.println("QuizzerPanel.ImagesComboBoxListener: actionPerformed method called");
//            
//        }
//        
//    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaQuestion;
    private javax.swing.JButton buttonNext;
    private javax.swing.JButton buttonPrevious;
    private javax.swing.JButton buttonSubmit;
    private javax.swing.JButton buttonViewInWindow;
    private javax.swing.JComboBox comboboxImages;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelAnswerMsg;
    private javax.swing.JLabel labelImage;
    private javax.swing.JLabel labelImageViewer;
    private javax.swing.JLabel labelProblemCount;
    private javax.swing.JPanel panelAnswer;
    private javax.swing.JPanel panelMain;
    private javax.swing.JScrollPane scrollPaneQuestion;
    // End of variables declaration//GEN-END:variables
}
