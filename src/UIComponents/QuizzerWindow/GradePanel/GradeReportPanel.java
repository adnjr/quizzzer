/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UIComponents.QuizzerWindow.GradePanel;

import DBObjects.Quiz;
import DBObjects.QuizProblem;
import DBObjects.ImageIconInfo;
import UIComponents.ImageViewer.ImageViewerDialog;
import UIComponents.QuizzerWindow.QuizzerFrame;
import java.awt.CardLayout;
import java.awt.Font;
import java.util.List;
import java.util.SortedSet;
import java.util.ArrayList;
import java.util.Set;
import quizzer.DatabaseInterface;

/**
 * This {@link JPanel} is intended to show the results of a graded quiz. It also
 * shows explanations for the correct answer, images associated with problems,
 * and a breakdown of which choices were missed on a multiple choice problem.
 * @author Armando
 * @see Quiz
 * @see GradedQuizTextInfoPanel
 * @see GradedQuizTableInfoPanel
 * @see GradeReportTable
 */
public class GradeReportPanel extends javax.swing.JPanel {
    private final Quiz quiz;
    private final QuizzerFrame parentFrame;
    private GradedQuizTextInfoPanel panelTextInfo;
    private GradedQuizTableInfoPanel panelTableInfo;
    private ImageViewerDialog dialogImageViewer;
    
    public static final int COLUMN_QUESTION = 0;
    public static final int COLUMN_USER_ANSWER = 1;
    public static final int COLUMN_CORRECT_ANSWER = 2;
    public static final int COLUMN_EXPLANATION = 3;
    public static final int COLUMN_IMAGE = 4;
    public static final int COLUMN_GRADE = 5;
    
    private static final String CARD_TEXT = "Text Info Card";
    private static final String CARD_TABLE = "Table Info Card";
    private static final Font defTableFont = new Font("Times New Roman", 1, 24);
    
    public GradeReportPanel(QuizzerFrame parentFrame, Quiz quiz) {
        this.quiz = quiz;
        this.parentFrame = parentFrame;
        this.panelTextInfo = null;
        this.panelTableInfo = null;
        initComponents();
        initElaborationPanel();
        int numRight = quiz.getNumberCorrect();
        int numProblems = quiz.getSize();
        double grade = (double)numRight / numProblems * 100;
        int g = (int)(grade * 100);
        String gradeStr = Double.toString(g / 100.0);
        gradeStr = "Grade: " + numRight + " / " + numProblems + " (" + gradeStr + "%)";
        labelGrade.setText(gradeStr);
    }
    
    /** Sets up <code>panelExtraInfo</code> by creating the two extra info
     * panels and adding them to it.**/
    private void initElaborationPanel() {
        panelTextInfo = new GradedQuizTextInfoPanel(null);
        panelTableInfo = new GradedQuizTableInfoPanel(null, null, null);
        
        panelExtraInfo.add(panelTextInfo, CARD_TEXT);
        panelExtraInfo.add(panelTableInfo, CARD_TABLE);
    }

    /** This is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor. */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPaneGradeTable = new javax.swing.JScrollPane();
        tblGradeReport = new GradeReportTable(new GradedQuizTableModel(quiz), this);
        buttonRetakeQuiz = new javax.swing.JButton();
        buttonFinish = new javax.swing.JButton();
        labelElaboration = new javax.swing.JLabel();
        panelExtraInfo = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        labelGrade = new javax.swing.JLabel();

        tblGradeReport.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        tblGradeReport.setCellSelectionEnabled(true);
        scrollPaneGradeTable.setViewportView(tblGradeReport);

        buttonRetakeQuiz.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        buttonRetakeQuiz.setText("Retake Quiz");
        buttonRetakeQuiz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRetakeQuizActionPerformed(evt);
            }
        });

        buttonFinish.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        buttonFinish.setText("Finish");
        buttonFinish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFinishActionPerformed(evt);
            }
        });

        labelElaboration.setFont(new java.awt.Font("Dialog", 1, 20)); // NOI18N
        labelElaboration.setText("Elaboration");

        panelExtraInfo.setLayout(new java.awt.CardLayout());

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel1.setText("Results");

        labelGrade.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        labelGrade.setText("Grade: xx/xx (xx%)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonRetakeQuiz)
                        .addGap(18, 18, 18)
                        .addComponent(buttonFinish))
                    .addComponent(scrollPaneGradeTable, javax.swing.GroupLayout.DEFAULT_SIZE, 611, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelElaboration)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(panelExtraInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(labelGrade)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonRetakeQuiz)
                    .addComponent(buttonFinish)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(scrollPaneGradeTable, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelGrade)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addComponent(labelElaboration)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelExtraInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /** Listener: Tells the parent {@link QuizzerFrame} to reset the quiz. **/
    private void buttonRetakeQuizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRetakeQuizActionPerformed
        parentFrame.retakeQuiz();
    }//GEN-LAST:event_buttonRetakeQuizActionPerformed

    /** Listener: Tells the parent {@link QuizzerFrame} to close. **/
    private void buttonFinishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFinishActionPerformed
        parentFrame.dispose();
    }//GEN-LAST:event_buttonFinishActionPerformed

    /** Shows <code>panelTextInfo</code> card, setting its info to
     * <code>text</code>**/
    private void setTextInfo(String text) {
        CardLayout cLayout;
        
        panelTextInfo.setText(text);
        cLayout = (CardLayout)panelExtraInfo.getLayout();
        cLayout.show(panelExtraInfo, CARD_TEXT);
    }
    /** Shows <code>panelTableInfo</code> card, setting its info to
     * <code>usrAns</code> and <code>corrAns</code>.**/
    private void setTableInfo(List<String> usrAns
            , Set<String> corrAns, List<String> choices) {
        CardLayout cLayout;
        
        panelTableInfo.setInfo(usrAns, corrAns, choices);
        cLayout = (CardLayout)panelExtraInfo.getLayout();
        cLayout.show(panelExtraInfo, CARD_TABLE);
    }
    
    /** Displays a dialog window image viewer, using <code>imageIcons</code>.
     * @see ImageViewerDialog **/
    private void viewImages(Set<ImageIconInfo> imageIcons) {
        setTextInfo("This problem has images.");
        if (dialogImageViewer == null)
            dialogImageViewer = new ImageViewerDialog(parentFrame, imageIcons);
        else {
            if (dialogImageViewer.getImages() == imageIcons && dialogImageViewer.isVisible() == true)
                return;
            dialogImageViewer.setImages(imageIcons);
        }
        
        dialogImageViewer.pack();
        dialogImageViewer.setLocationRelativeTo(this);
        dialogImageViewer.setVisible(true);
    }
    
    /** Adds interactivity to <code>tblGradeReport</code> by showing
     * extra info about a cell whenever it is selected.
     * @see initGradeTable() **/
    public void showMoreInfo() {
        int row;
        int col;
        QuizProblem qProb;

        row = tblGradeReport.getSelectionModel().getLeadSelectionIndex();
        col = tblGradeReport.getColumnModel().getSelectionModel()
                .getLeadSelectionIndex();

        // check bounds
        if (row < 0 || row >= tblGradeReport.getRowCount()
                || col < 0 || col >= tblGradeReport.getColumnCount())
            return;

        qProb = quiz.getProblems().get(row);
        List<String> userAnswers = qProb.getUserAnswers();
        Set<String> correctAnswers = qProb.getCorrectAnswers();
        List<String> choices = new ArrayList<>(qProb.getChoices());
        boolean isMultChoice = (qProb.isMultipleChoice());

        // set text appropriately depending on column
        if (col == COLUMN_QUESTION) {
            labelElaboration.setText("Question");
            setTextInfo(qProb.getQuestion());
        } else if (col == COLUMN_USER_ANSWER) {
            if (isMultChoice) {
                labelElaboration.setText("Your Choices");
                setTableInfo(userAnswers, correctAnswers, choices);
            }
            else {
                labelElaboration.setText("Your Answer");
                setTextInfo(
                        (userAnswers.isEmpty() || userAnswers.get(0)==null)
                        ? "No answer was given." : userAnswers.get(0));
            }
        } else if (col == COLUMN_CORRECT_ANSWER) {
            if (isMultChoice) {
                labelElaboration.setText("Your Choices");
                setTableInfo(userAnswers, correctAnswers, choices);
            }
            else {
                labelElaboration.setText("Correct Answer");
                setTextInfo((correctAnswers.iterator().next() == null)
                        ? "No correct answer?" : correctAnswers.iterator().next());
            }
        } else if (col == COLUMN_EXPLANATION) {
            labelElaboration.setText("Explanation");
            setTextInfo(qProb.getExplanation());
        } else if (col == COLUMN_IMAGE) {
            if (qProb.getImages().isEmpty())
                setTextInfo("This problem does not have any images.");
            else
                viewImages(qProb.getImages());
        } else if (col == COLUMN_GRADE) {
            labelElaboration.setText("Grade");
            if (isMultChoice)
                setTableInfo(userAnswers, correctAnswers, choices);
            else {
                if (qProb.isCorrect() == null)
                    setTextInfo("This short-answer problem cannot be graded automatically. To grade it manually, click the question mark in the table to scroll through options, or click \"Mark ?'s right/wrong\".");
                else
                    setTextInfo((qProb.isCorrect())
                            ? "Correct Answer" : "Wrong Answer");
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonFinish;
    private javax.swing.JButton buttonRetakeQuiz;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel labelElaboration;
    private javax.swing.JLabel labelGrade;
    /** Uses a card layout to switch between two panels, <code>panelTextInfo</code> and <code>panelTableInfo</code>. **/
    private javax.swing.JPanel panelExtraInfo;
    private javax.swing.JScrollPane scrollPaneGradeTable;
    /** Displays results of a graded quiz. It allows selections which show more info in <code>panelExtraInfo</code>. **/
    private javax.swing.JTable tblGradeReport;
    // End of variables declaration//GEN-END:variables
}
