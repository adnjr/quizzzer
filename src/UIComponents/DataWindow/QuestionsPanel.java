package UIComponents.DataWindow;

import UIComponents.DirectorPublisher;
import UIComponents.DirectorSubscriber;
import UIComponents.UISettings;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.border.Border;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import quizzer.HandlerFactory;
import quizzer.ManageProblemsHandler;
import utilities.ui.UIUtils;

/**
 *
 * @author Armando
 */
public class QuestionsPanel extends javax.swing.JPanel implements DirectorPublisher {

    private final ManageProblemsHandler pHandler;
    
    private final PanelListener panelListener;
    private JButton lastClicked;
    private final Border enabledBorder = UISettings.enabledBorder;
    private final Border disabledBorder = UISettings.disabledBorder;
    private final Border eModifyBorder =
            BorderFactory.createTitledBorder(enabledBorder, "Modify");
    private final Border dModifyBorder =
            BorderFactory.createTitledBorder(disabledBorder, "Modify");
    private final Border eMoreInfoBorder =
            BorderFactory.createTitledBorder(enabledBorder, "More Info");
    private final Border dMoreInfoBorder =
            BorderFactory.createTitledBorder(disabledBorder, "More Info");
    
    private final Set<DirectorSubscriber> subscribers;
    
    public static final int ADD_QUESTION = 0;
    public static final int SELECTION_CHANGED = 1;
    public static final int SHOW_DETAILS = 2;
    public static final int SHOW_IMAGES = 3;
    public static final int SHOW_STATS = 4;
    
    /**
     * Creates new form QuestionsPanel
     * @param subscriber
     */
    public QuestionsPanel(DirectorSubscriber subscriber) {
        if (subscriber == null)
            throw new NullPointerException("This panel cannot be instantiated without a subscriber.");
        this.subscribers = new HashSet<>();
        this.subscribers.add(subscriber);
        lastClicked = new JButton();
        pHandler = HandlerFactory.getHandlerFactory().getProblemsHandler();
        panelListener = new PanelListener();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelMain = new javax.swing.JPanel();
        scrollPaneQuestions = new javax.swing.JScrollPane();
        listQuestions = new javax.swing.JList();
        panelModify = new javax.swing.JPanel();
        buttonAddQuestion = new javax.swing.JButton();
        buttonEditQuestion = new javax.swing.JButton();
        buttonDeleteQuestion = new javax.swing.JButton();
        panelMoreInfo = new javax.swing.JPanel();
        buttonStats = new javax.swing.JButton();
        buttonImages = new javax.swing.JButton();
        buttonDetails = new javax.swing.JButton();

        listQuestions.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        listQuestions.setModel(new QuestionsListModel());
        listQuestions.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listQuestions.addListSelectionListener(panelListener);
        scrollPaneQuestions.setViewportView(listQuestions);

        panelModify.setBorder(BorderFactory.createTitledBorder(disabledBorder, "Modify"));

        buttonAddQuestion.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        buttonAddQuestion.setText("Add");
        buttonAddQuestion.setEnabled(false);
        buttonAddQuestion.addActionListener(panelListener);

        buttonEditQuestion.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        buttonEditQuestion.setText("Edit");
        buttonEditQuestion.setEnabled(false);
        buttonEditQuestion.addActionListener(panelListener);

        buttonDeleteQuestion.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        buttonDeleteQuestion.setText("Delete");
        buttonDeleteQuestion.setEnabled(false);
        buttonDeleteQuestion.addActionListener(panelListener);

        javax.swing.GroupLayout panelModifyLayout = new javax.swing.GroupLayout(panelModify);
        panelModify.setLayout(panelModifyLayout);
        panelModifyLayout.setHorizontalGroup(
            panelModifyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelModifyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelModifyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonDeleteQuestion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonEditQuestion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonAddQuestion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelModifyLayout.setVerticalGroup(
            panelModifyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelModifyLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonAddQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonEditQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonDeleteQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelMoreInfo.setBorder(javax.swing.BorderFactory.createTitledBorder(disabledBorder, "More Info"));

        buttonStats.setFont(new java.awt.Font("Dialog", 0, 17)); // NOI18N
        buttonStats.setText("Stats");
        buttonStats.addActionListener(panelListener);

        buttonImages.setFont(new java.awt.Font("Dialog", 0, 17)); // NOI18N
        buttonImages.setText("Images");
        buttonImages.addActionListener(panelListener);

        buttonDetails.setFont(new java.awt.Font("Dialog", 0, 17)); // NOI18N
        buttonDetails.setText("Details");
        buttonDetails.addActionListener(panelListener);

        javax.swing.GroupLayout panelMoreInfoLayout = new javax.swing.GroupLayout(panelMoreInfo);
        panelMoreInfo.setLayout(panelMoreInfoLayout);
        panelMoreInfoLayout.setHorizontalGroup(
            panelMoreInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMoreInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMoreInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonImages, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonStats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelMoreInfoLayout.setVerticalGroup(
            panelMoreInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMoreInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonImages, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonStats, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelMainLayout = new javax.swing.GroupLayout(panelMain);
        panelMain.setLayout(panelMainLayout);
        panelMainLayout.setHorizontalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPaneQuestions, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelMoreInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelModify, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelMainLayout.setVerticalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneQuestions)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMainLayout.createSequentialGroup()
                .addComponent(panelModify, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelMoreInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public String getCourse() {
        return getModel().getCourseTitle(getQuestion());
    }
    
    public String getQuestion() {
        return (String)listQuestions.getSelectedValue();
    }
    
    public Map<String,String> getQuestions() {
        return getModel().getQuestions();
    }
    
    private void questionsListChanged() {
        boolean empty = listQuestions.isSelectionEmpty();

        notifySubscribers(SELECTION_CHANGED);
        
        // set ui elements
        buttonDeleteQuestion.setEnabled(!empty);
        buttonEditQuestion.setEnabled(!empty);
        panelMoreInfo.setEnabled(!empty);
        buttonDetails.setEnabled(!empty);
        buttonImages.setEnabled(!empty);
        buttonStats.setEnabled(!empty);
        lastClicked.setEnabled(false);
        panelMoreInfo.setBorder((empty) ? dMoreInfoBorder : eMoreInfoBorder);
        panelModify.setBorder((empty) ? dModifyBorder : eModifyBorder);
    }
    
    public void addQuestion(String question, String courseTitle) {
        getModel().addQuestion(question, courseTitle);
        listQuestions.setSelectedValue(question, true);
    }
    
    public void setQuestions(Map<String,String> questionsToCourse) {
        getModel().removeAll();
        getModel().addQuestions(questionsToCourse);
        if (!isEmpty())
            listQuestions.setSelectedIndex(0);
    }
    
    public void setAddEnabled(boolean bool) {
        buttonAddQuestion.setEnabled(bool);
    }
    
    public boolean isEmpty() {
        return getModel().isEmpty();
    }
    
    private void editQuestion() {
        String courseTitle;
        String oldQuestion;
        String newQuestion;

        // collect question info
        oldQuestion = (String)listQuestions.getSelectedValue();
        courseTitle = getModel().getCourseTitle(oldQuestion);
        newQuestion = UIUtils.inputDialog(
                this, "Enter a new question", "Edit Question", oldQuestion);

        // send the request to edit the question; update question list on success
        if (pHandler.setQuestion(courseTitle , oldQuestion, newQuestion))
            getModel().updateQuestion(oldQuestion, newQuestion);
    }
    
    private void deleteQuestion() {
        String question;
        String course;
        int index;

        // collect question info
        question = (String)listQuestions.getSelectedValue();
        course = getModel().getCourseTitle(question);
        index = listQuestions.getSelectedIndex();

        // send deletion request
        if (!pHandler.deleteProblem(course, question))
            return;
        
        // update ui
        getModel().removeQuestion(question);
        if (!getModel().isEmpty())
            listQuestions.setSelectedIndex(
                (index > getModel().getSize()) ? getModel().getSize() : index);
    }
    
    public void unclickLast() {
        lastClicked.setEnabled(true);
        lastClicked = new JButton();
    }
    
    private void showDetails() {
        buttonDetails.setEnabled(false);
        buttonImages.setEnabled(true);
        buttonStats.setEnabled(true);
        lastClicked = buttonDetails;
        notifySubscribers(SHOW_DETAILS);
    }
    
    private void showImages() {
        buttonImages.setEnabled(false);
        buttonDetails.setEnabled(true);
        buttonStats.setEnabled(true);
        lastClicked = buttonImages;
        notifySubscribers(SHOW_IMAGES);
    }
    
    private void showStats() {
        buttonStats.setEnabled(false);
        buttonDetails.setEnabled(true);
        buttonImages.setEnabled(true);
        lastClicked = buttonStats;
        notifySubscribers(SHOW_STATS);
    }
    
    private QuestionsListModel getModel() {
        return (QuestionsListModel)listQuestions.getModel();
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAddQuestion;
    private javax.swing.JButton buttonDeleteQuestion;
    private javax.swing.JButton buttonDetails;
    private javax.swing.JButton buttonEditQuestion;
    private javax.swing.JButton buttonImages;
    private javax.swing.JButton buttonStats;
    private javax.swing.JList listQuestions;
    private javax.swing.JPanel panelMain;
    private javax.swing.JPanel panelModify;
    private javax.swing.JPanel panelMoreInfo;
    private javax.swing.JScrollPane scrollPaneQuestions;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addSubscriber(DirectorSubscriber subscriber) {
        if (subscriber != null)
            subscribers.add(subscriber);
    }

    @Override
    public void notifySubscribers(int eventIndicator) {
        for (DirectorSubscriber subber : subscribers)
            subber.onEvent(this, eventIndicator);
    }

    private class PanelListener implements ActionListener, ListSelectionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            Object src = e.getSource();
            
            if (src == buttonDeleteQuestion)
                deleteQuestion();
            if (src == buttonEditQuestion)
                editQuestion();
            if (src == buttonAddQuestion)
                notifySubscribers(ADD_QUESTION);
            if (src == buttonDetails)
                showDetails();
            if (src == buttonImages)
                showImages();
            if (src == buttonStats)
                showStats();
        }

        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (e.getSource() == listQuestions)
                questionsListChanged();
        }
        
    }
    
}
