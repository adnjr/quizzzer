package UIComponents.DataWindow.AddQuestionPanel;

import DBObjects.ImageFileInfo;
import DBObjects.ImageIconInfo;
import DBObjects.ImageInfo;
import ErrorService.ErrorReporter;
import ErrorService.ErrorService;
import UIComponents.DataWindow.ChoiceDocumentListener;
import UIComponents.DataWindow.ImageFileFilter;
import UIComponents.DirectorPublisher;
import UIComponents.DirectorSubscriber;
import UIComponents.ImageViewer.ImagesListModel;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.WindowConstants;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import quizzer.HandlerFactory;
import quizzer.ManageProblemsHandler;

/**
 *
 * @author Armando
 */
public class AddQuestionPanel extends javax.swing.JPanel
        implements DirectorPublisher, ErrorReporter {
    
    private final Set<DirectorSubscriber> subscribers;
    private String courseTitle;
    public String question;
    private final PanelListener panelListener;
    private final ManageProblemsHandler pHandler;
    private final JTextField[] choiceFields;
    private final JCheckBox[] choiceCheckboxes;
    private final JFileChooser fileChooser;
    
    private final Color borderEnabledColor = new Color(51, 153, 255);
    private final Color borderDisabledColor = new Color(153, 153, 153);
    TitledBorder borderMultChoiceEnabled = BorderFactory.createTitledBorder(
            new LineBorder(borderEnabledColor, 1, true), "Add Multiple Choices/Answers");
    TitledBorder borderMultChoiceDisabled = BorderFactory.createTitledBorder(
            new LineBorder(borderDisabledColor, 1, true), "Add Multiple Choices/Answers");
    TitledBorder borderMainEnabled = BorderFactory.createTitledBorder(
            new LineBorder(borderEnabledColor, 1, true), "Add a New Question");
    TitledBorder borderMainDisabled = BorderFactory.createTitledBorder(
            new LineBorder(borderEnabledColor, 1, true), "Add a New Question");
    
    public static final int ADD_EXISTING_IMAGE = 2;
    private static final String EXISTING_TAGS = "existing tags";
    
    public AddQuestionPanel(DirectorSubscriber subscriber) {
        if (subscriber == null)
            throw new NullPointerException("This panel cannot be instantiated without a subscriber.");
        this.courseTitle = null;
        this.subscribers = new HashSet<>();
        this.subscribers.add(subscriber);
        this.panelListener = new PanelListener();
        this.pHandler = HandlerFactory.getHandlerFactory().getProblemsHandler();
        choiceFields = new JTextField[6];
        choiceCheckboxes = new JCheckBox[6];
        fileChooser = new JFileChooser("C:/Users/Armando/Pictures/");
        fileChooser.setFileFilter(new ImageFileFilter());
        fileChooser.setPreferredSize(new Dimension(650, 700));
        initFileChooser(fileChooser.getComponents());
        initComponents();
        
        // set up combo box for tags
        // TODO combo box function, but still static; finish it
        comboBoxTags.addItem(EXISTING_TAGS);
        for (String tag : pHandler.getTags())
            comboBoxTags.addItem(tag);
        comboBoxTags.setEditable(false);
    }
    
    private void initFileChooser(Component[] components) {
        java.awt.Font font = new java.awt.Font("Dialog", 0, 18);
        
        for (Component comp : components) {
            if (comp instanceof Container) {
                Container cont = (Container)comp;
                initFileChooser(cont.getComponents());
            }
            comp.setFont(font);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelAddQuestion = new javax.swing.JPanel();
        labelAddQuestion = new javax.swing.JLabel();
        fieldAddQuestion = new javax.swing.JTextField();
        labelAnswer = new javax.swing.JLabel();
        fieldAnswer = new javax.swing.JTextField();
        labelExplanation = new javax.swing.JLabel();
        fieldExplanation = new javax.swing.JTextField();
        labelTags = new javax.swing.JLabel();
        fieldTags = new javax.swing.JTextField();
        checkboxMultipleChoice = new javax.swing.JCheckBox();
        comboBoxTags = new javax.swing.JComboBox();
        scrollPaneImages = new javax.swing.JScrollPane();
        listImages = new javax.swing.JList();
        labelImage = new javax.swing.JLabel();
        buttonNewImage = new javax.swing.JButton();
        buttonExistingImage = new javax.swing.JButton();
        buttonRemoveImage = new javax.swing.JButton();
        buttonView = new javax.swing.JButton();
        buttonCancel = new javax.swing.JButton();
        buttonAddQuestion = new javax.swing.JButton();
        panelMultipleChoice = new javax.swing.JPanel();
        fieldChoice2 = new javax.swing.JTextField();
        fieldChoice1 = new javax.swing.JTextField();
        fieldChoice5 = new javax.swing.JTextField();
        fieldChoice3 = new javax.swing.JTextField();
        fieldChoice4 = new javax.swing.JTextField();
        checkboxChoice3 = new javax.swing.JCheckBox();
        checkboxChoice2 = new javax.swing.JCheckBox();
        checkboxChoice1 = new javax.swing.JCheckBox();
        checkboxChoice5 = new javax.swing.JCheckBox();
        checkboxChoice6 = new javax.swing.JCheckBox();
        checkboxChoice4 = new javax.swing.JCheckBox();
        fieldChoice6 = new javax.swing.JTextField();
        labelChoiceInstructions = new javax.swing.JLabel();

        setBorder(borderMainDisabled);

        panelAddQuestion.setEnabled(false);
        panelAddQuestion.setPreferredSize(new java.awt.Dimension(939, 300));

        labelAddQuestion.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        labelAddQuestion.setText("Question");
        labelAddQuestion.setEnabled(false);

        fieldAddQuestion.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        fieldAddQuestion.setEnabled(false);
        fieldAddQuestion.addActionListener(panelListener);

        labelAnswer.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        labelAnswer.setText("Answer");
        labelAnswer.setEnabled(false);

        fieldAnswer.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        fieldAnswer.setEnabled(false);
        fieldAnswer.addActionListener(panelListener);

        labelExplanation.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        labelExplanation.setText("Explanation");
        labelExplanation.setEnabled(false);

        fieldExplanation.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        fieldExplanation.setEnabled(false);
        fieldExplanation.addActionListener(panelListener);

        labelTags.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        labelTags.setText("Tags");
        labelTags.setEnabled(false);

        fieldTags.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        fieldTags.setEnabled(false);
        fieldTags.addActionListener(panelListener);

        checkboxMultipleChoice.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        checkboxMultipleChoice.setText("Multiple Choice");
        checkboxMultipleChoice.setEnabled(false);
        checkboxMultipleChoice.addItemListener(panelListener);

        comboBoxTags.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        comboBoxTags.addActionListener(panelListener);

        javax.swing.GroupLayout panelAddQuestionLayout = new javax.swing.GroupLayout(panelAddQuestion);
        panelAddQuestion.setLayout(panelAddQuestionLayout);
        panelAddQuestionLayout.setHorizontalGroup(
            panelAddQuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddQuestionLayout.createSequentialGroup()
                .addGroup(panelAddQuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAddQuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(panelAddQuestionLayout.createSequentialGroup()
                            .addGap(33, 33, 33)
                            .addComponent(labelAddQuestion)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(fieldAddQuestion))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddQuestionLayout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(panelAddQuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(labelTags)
                                .addComponent(labelExplanation)
                                .addComponent(labelAnswer))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(panelAddQuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(panelAddQuestionLayout.createSequentialGroup()
                                    .addComponent(fieldTags)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(comboBoxTags, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(fieldExplanation, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addGroup(panelAddQuestionLayout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addComponent(fieldAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelAddQuestionLayout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(checkboxMultipleChoice)))
                .addGap(12, 12, 12))
        );
        panelAddQuestionLayout.setVerticalGroup(
            panelAddQuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddQuestionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAddQuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelAddQuestion)
                    .addComponent(fieldAddQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(panelAddQuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelExplanation)
                    .addComponent(fieldExplanation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAddQuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelTags)
                    .addGroup(panelAddQuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(fieldTags, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboBoxTags, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAddQuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelAnswer)
                    .addComponent(fieldAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addComponent(checkboxMultipleChoice)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        listImages.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        listImages.setModel(new ImagesListModel());
        listImages.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listImages.addListSelectionListener(panelListener);
        scrollPaneImages.setViewportView(listImages);

        labelImage.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        labelImage.setText("Images");
        labelImage.setEnabled(false);

        buttonNewImage.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        buttonNewImage.setText("Add New Image");
        buttonNewImage.setEnabled(false);
        buttonNewImage.addActionListener(panelListener);

        buttonExistingImage.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        buttonExistingImage.setText("Add Existing Image");
        buttonExistingImage.setEnabled(false);
        buttonExistingImage.addActionListener(panelListener);

        buttonRemoveImage.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        buttonRemoveImage.setText("Remove");
        buttonRemoveImage.setEnabled(false);
        buttonRemoveImage.addActionListener(panelListener);

        buttonView.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        buttonView.setText("View");
        buttonView.setEnabled(false);
        buttonView.addActionListener(panelListener);

        buttonCancel.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(panelListener);

        buttonAddQuestion.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        buttonAddQuestion.setText("Add Question");
        buttonAddQuestion.setEnabled(false);
        buttonAddQuestion.addActionListener(panelListener);

        panelMultipleChoice.setBorder(borderMultChoiceDisabled);
        panelMultipleChoice.setEnabled(false);

        fieldChoice2.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        fieldChoice2.setEnabled(false);
        fieldChoice2.getDocument().addDocumentListener(new ChoiceDocumentListener(checkboxChoice2, fieldChoice2));
        choiceFields[1] = fieldChoice2;
        fieldChoice2.addActionListener(panelListener);

        fieldChoice1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        fieldChoice1.setEnabled(false);
        fieldChoice1.getDocument().addDocumentListener(new ChoiceDocumentListener(checkboxChoice1, fieldChoice1));
        choiceFields[0] = fieldChoice1;
        fieldChoice1.addActionListener(panelListener);

        fieldChoice5.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        fieldChoice5.setEnabled(false);
        fieldChoice5.getDocument().addDocumentListener(new ChoiceDocumentListener(checkboxChoice5, fieldChoice5));
        choiceFields[4] = fieldChoice5;
        fieldChoice5.addActionListener(panelListener);

        fieldChoice3.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        fieldChoice3.setEnabled(false);
        fieldChoice3.getDocument().addDocumentListener(new ChoiceDocumentListener(checkboxChoice3, fieldChoice3));
        choiceFields[2] = fieldChoice3;
        fieldChoice3.addActionListener(panelListener);

        fieldChoice4.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        fieldChoice4.setEnabled(false);
        fieldChoice4.getDocument().addDocumentListener(new ChoiceDocumentListener(checkboxChoice4, fieldChoice4));
        choiceFields[3] = fieldChoice4;
        fieldChoice4.addActionListener(panelListener);

        checkboxChoice3.setEnabled(false);
        checkboxChoice3.setMargin(new java.awt.Insets(6, 6, 6, 6));
        choiceCheckboxes[2] = checkboxChoice3;

        checkboxChoice2.setEnabled(false);
        checkboxChoice2.setMargin(new java.awt.Insets(6, 6, 6, 6));
        choiceCheckboxes[1] = checkboxChoice2;

        checkboxChoice1.setEnabled(false);
        checkboxChoice1.setMargin(new java.awt.Insets(6, 6, 6, 6));
        choiceCheckboxes[0] = checkboxChoice1;

        checkboxChoice5.setEnabled(false);
        checkboxChoice5.setMargin(new java.awt.Insets(6, 6, 6, 6));
        choiceCheckboxes[4] = checkboxChoice5;

        checkboxChoice6.setEnabled(false);
        checkboxChoice6.setMargin(new java.awt.Insets(6, 6, 6, 6));
        choiceCheckboxes[5] = checkboxChoice6;

        checkboxChoice4.setEnabled(false);
        checkboxChoice4.setMargin(new java.awt.Insets(6, 6, 6, 6));
        choiceCheckboxes[3] = checkboxChoice4;

        fieldChoice6.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        fieldChoice6.setEnabled(false);
        fieldChoice6.getDocument().addDocumentListener(new ChoiceDocumentListener(checkboxChoice6, fieldChoice6));
        choiceFields[5] = fieldChoice6;
        fieldChoice6.addActionListener(panelListener);

        labelChoiceInstructions.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        labelChoiceInstructions.setText("Place a check next to the correct answer(s)");
        labelChoiceInstructions.setEnabled(false);

        javax.swing.GroupLayout panelMultipleChoiceLayout = new javax.swing.GroupLayout(panelMultipleChoice);
        panelMultipleChoice.setLayout(panelMultipleChoiceLayout);
        panelMultipleChoiceLayout.setHorizontalGroup(
            panelMultipleChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMultipleChoiceLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelMultipleChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkboxChoice1)
                    .addComponent(checkboxChoice2)
                    .addComponent(checkboxChoice3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMultipleChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fieldChoice1)
                    .addComponent(fieldChoice2)
                    .addComponent(fieldChoice3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(panelMultipleChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelMultipleChoiceLayout.createSequentialGroup()
                        .addComponent(checkboxChoice6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldChoice6))
                    .addGroup(panelMultipleChoiceLayout.createSequentialGroup()
                        .addGroup(panelMultipleChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkboxChoice4)
                            .addComponent(checkboxChoice5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelMultipleChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(fieldChoice4)
                            .addComponent(fieldChoice5, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
            .addGroup(panelMultipleChoiceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelChoiceInstructions)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelMultipleChoiceLayout.setVerticalGroup(
            panelMultipleChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMultipleChoiceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMultipleChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMultipleChoiceLayout.createSequentialGroup()
                        .addGroup(panelMultipleChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panelMultipleChoiceLayout.createSequentialGroup()
                                .addGroup(panelMultipleChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(fieldChoice1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(checkboxChoice1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fieldChoice2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(checkboxChoice2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelMultipleChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(fieldChoice3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkboxChoice3)))
                    .addGroup(panelMultipleChoiceLayout.createSequentialGroup()
                        .addGroup(panelMultipleChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(fieldChoice4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkboxChoice4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelMultipleChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(fieldChoice5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkboxChoice5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelMultipleChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(checkboxChoice6)
                            .addComponent(fieldChoice6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelChoiceInstructions))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelAddQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrollPaneImages, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelImage)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(buttonView)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(buttonRemoveImage))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(buttonExistingImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonNewImage, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelMultipleChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(buttonAddQuestion)
                            .addComponent(buttonCancel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelAddQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelImage)
                            .addComponent(buttonRemoveImage, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonView, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollPaneImages, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonNewImage, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonExistingImage, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(buttonAddQuestion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonCancel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(panelMultipleChoice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(53, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addNewImage() {
        ImageFileInfo fileInfo;
        File file;
        
        if (fileChooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)
            return;
        
        file = fileChooser.getSelectedFile();
        fileInfo = new ImageFileInfo(file, file.getName());
        getModel().addImage(fileInfo);
    }
    
    private void multChoiceToggle() {
        if (checkboxMultipleChoice.isSelected()) {
            for (JTextField tf : choiceFields)
                tf.setEnabled(true);
            panelMultipleChoice.setEnabled(true);
            panelMultipleChoice.setBorder(borderMultChoiceEnabled);
            labelChoiceInstructions.setEnabled(true);
            labelAnswer.setEnabled(false);
            fieldAnswer.setEditable(false);
            fieldAnswer.setText("");
        } else {
            for (JTextField tf : choiceFields)
                tf.setEnabled(false);
            for (JCheckBox cb : choiceCheckboxes)
                cb.setSelected(false);
            panelMultipleChoice.setEnabled(false);
            panelMultipleChoice.setBorder(borderMultChoiceDisabled);
            labelChoiceInstructions.setEnabled(false);
            labelAnswer.setEnabled(true);
            fieldAnswer.setEditable(true);
        }
    }
    
    private void addExistingImage() {
        notifySubscribers(ADD_EXISTING_IMAGE);
    }
    
    private void cancel() {
        clear();
        notifySubscribers(FAILURE);
    }
    
    private void removeImage() {
        String selection = (String)listImages.getSelectedValue();
        getModel().removeImage(selection);
    }
    
    private void viewImage() {
        ImageInfo imageInfo;
        ImageFileInfo imageFileInfo;
        ImageIconInfo imageIcon = null;
        BufferedImage bufferedImage;
        JFrame viewFrame;
        JLabel viewLabel;
        JScrollPane scrollPane;
        int selectedIndex;
        
        // get selected image
        selectedIndex = listImages.getSelectedIndex();
        imageInfo = getModel().getImageAt(selectedIndex);
        
        // construct the image icon if necessary
        if (imageInfo instanceof ImageFileInfo) {
            imageFileInfo = (ImageFileInfo)imageInfo;
            try {
                bufferedImage = ImageIO.read(imageFileInfo.getImageFile());
                imageIcon = new ImageIconInfo(bufferedImage, imageFileInfo.getCaption());
            }
            catch (IOException e) { reportError(e.getMessage()); }
        } else
            imageIcon = (ImageIconInfo)imageInfo;
        
        if (imageIcon == null)
            throw new NullPointerException("AddQuestionPanel.addImageToNewQuestion: imageIcon was null");
        
        // construct new frame and display image
        viewFrame = new JFrame(imageIcon.getCaption());
        viewLabel = new JLabel();
        scrollPane = new JScrollPane(viewLabel);
        viewLabel.setIcon(imageIcon);
        viewFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        viewFrame.getContentPane().add(scrollPane);
        viewFrame.pack();
        viewFrame.setLocationRelativeTo(this);
        viewFrame.setVisible(true);
    }
    
    private void imageListChanged() {
        buttonView.setEnabled(!listImages.isSelectionEmpty());
        buttonRemoveImage.setEnabled(!listImages.isSelectionEmpty());
    }
    
    private void addQuestion() {
        String questionText;
        String answerFieldText;
        String explanation;
        Set<String> tags;
        SortedSet<String> answers;
        SortedSet<String> nonAnswerChoices;
        String currentChoice;
        Set<ImageInfo> images;
        boolean success;
        
        questionText = fieldAddQuestion.getText().trim();
        answerFieldText = fieldAnswer.getText().trim();
        explanation = fieldExplanation.getText().trim();
        tags = readTags();
        answers = new TreeSet<>();
        nonAnswerChoices = new TreeSet<>();
        images = new HashSet<>(getModel().getImages());

        // collect answer(s)/choice(s)
        if (checkboxMultipleChoice.isSelected()) {
            for (int i = 0; i < 6; i++) {
                currentChoice = choiceFields[i].getText().trim();
                if (currentChoice.length() > 0)
                    if (choiceCheckboxes[i].isSelected())
                        answers.add(currentChoice);
                else
                    nonAnswerChoices.add(currentChoice);
            }
        }
        else if (answerFieldText.length() > 0 && questionText.length() > 0)
            answers.add(answerFieldText);

        // send to request to add the problem
        if (pHandler.addProblem(courseTitle, questionText, answers
                , nonAnswerChoices, tags, explanation, images)) {
            
            this.question = questionText; // success
            clear();
            notifySubscribers(AddQuestionPanel.SUCCESS);
        }
        else
            this.question = null; // question addition failed
    }
    
    /** Triggered when a tag is selected in the combo box. Adds the chosen
     * tag to the tag input text field. */
    private void addSelectedTagToTagField() {
        String selectedTag;
        Set<String> manualTags;
        
        selectedTag = (String)comboBoxTags.getSelectedItem();
        manualTags = readTags();
        
        if (manualTags.contains(selectedTag) || selectedTag.equals(EXISTING_TAGS))
            return;
        
        fieldTags.setText( ( manualTags.isEmpty() )
                ? selectedTag
                : fieldTags.getText() + ", " + selectedTag);
    }
    
    /** Reads and parses input from tags text field
      * @return A set of String tags. If no tags read, the set is empty. **/
    private Set<String> readTags() {
        Set<String> tags;
        String tagsFieldText;
        
        tags = new HashSet<>();
        tagsFieldText = fieldTags.getText().trim();
        for (String tag : tagsFieldText.split(","))
            if (!tag.trim().isEmpty())
                tags.add(tag.trim());
        
        return tags;
    }
    
    private void clear() {
        fieldAddQuestion.setText("");
        fieldAnswer.setText("");
        fieldExplanation.setText("");
        fieldTags.setText("");
        for (JTextField field : choiceFields)
            field.setText("");
        for (JCheckBox cb : choiceCheckboxes)
            cb.setSelected(false);
        getModel().removeAllImages();
    }
    
    public void addImage(ImageIconInfo imageIcon) {
        if (imageIcon != null)
            getModel().addImage(imageIcon);
    }
    
    public void setCourse(String newCourseTitle) {
        this.courseTitle = newCourseTitle;
        if (newCourseTitle != null)
            enablePanel();
        else
            disablePanel();
    }
    
    private void enablePanel() {
        this.setEnabled(true);
        labelAddQuestion.setEnabled(true);
        labelExplanation.setEnabled(true);
        labelTags.setEnabled(true);
        labelImage.setEnabled(true);
        labelAnswer.setEnabled(true);
        fieldAddQuestion.setEnabled(true);
        fieldExplanation.setEnabled(true);
        fieldTags.setEnabled(true);
        fieldAnswer.setEnabled(true);
        buttonNewImage.setEnabled(true);
        buttonExistingImage.setEnabled(true);
        checkboxMultipleChoice.setEnabled(true);
        buttonAddQuestion.setEnabled(true);
        this.setBorder(borderMainEnabled);
        panelAddQuestion.setEnabled(true);
    }
    
    private void disablePanel() {
        this.setEnabled(false);
        labelAddQuestion.setEnabled(false);
        labelExplanation.setEnabled(false);
        labelTags.setEnabled(false);
        labelImage.setEnabled(false);
        labelAnswer.setEnabled(false);
        fieldAddQuestion.setEnabled(false);
        fieldExplanation.setEnabled(false);
        fieldTags.setEnabled(false);
        fieldAnswer.setEnabled(false);
        buttonNewImage.setEnabled(false);
        buttonExistingImage.setEnabled(false);
        checkboxMultipleChoice.setEnabled(false);
        buttonAddQuestion.setEnabled(false);
        this.setBorder(borderMainDisabled);
        panelAddQuestion.setEnabled(true);
    }
    
    private ImagesListModel getModel() {
        return (ImagesListModel)listImages.getModel();
    }
    
    public String getQuestion() {
        return this.question;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAddQuestion;
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonExistingImage;
    private javax.swing.JButton buttonNewImage;
    private javax.swing.JButton buttonRemoveImage;
    private javax.swing.JButton buttonView;
    private javax.swing.JCheckBox checkboxChoice1;
    private javax.swing.JCheckBox checkboxChoice2;
    private javax.swing.JCheckBox checkboxChoice3;
    private javax.swing.JCheckBox checkboxChoice4;
    private javax.swing.JCheckBox checkboxChoice5;
    private javax.swing.JCheckBox checkboxChoice6;
    private javax.swing.JCheckBox checkboxMultipleChoice;
    private javax.swing.JComboBox comboBoxTags;
    private javax.swing.JTextField fieldAddQuestion;
    private javax.swing.JTextField fieldAnswer;
    private javax.swing.JTextField fieldChoice1;
    private javax.swing.JTextField fieldChoice2;
    private javax.swing.JTextField fieldChoice3;
    private javax.swing.JTextField fieldChoice4;
    private javax.swing.JTextField fieldChoice5;
    private javax.swing.JTextField fieldChoice6;
    private javax.swing.JTextField fieldExplanation;
    private javax.swing.JTextField fieldTags;
    private javax.swing.JLabel labelAddQuestion;
    private javax.swing.JLabel labelAnswer;
    private javax.swing.JLabel labelChoiceInstructions;
    private javax.swing.JLabel labelExplanation;
    private javax.swing.JLabel labelImage;
    private javax.swing.JLabel labelTags;
    private javax.swing.JList listImages;
    private javax.swing.JPanel panelAddQuestion;
    private javax.swing.JPanel panelMultipleChoice;
    private javax.swing.JScrollPane scrollPaneImages;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addSubscriber(DirectorSubscriber subscriber) {
        if (subscriber != null)
            this.subscribers.add(subscriber);
    }

    @Override
    public void notifySubscribers(int eventIndicator) {
        for (DirectorSubscriber subber : subscribers)
            subber.onEvent(this, eventIndicator);
    }

    @Override
    public void reportError(String error) {
        ErrorService.getService().reportError(error);
    }

    @Override
    public void reportErrors(List<String> errors) {
        ErrorService.getService().reportErrors(errors);
    }
    
    // --------------------------- UI Events ----------------------------------
    
    private class PanelListener implements ActionListener, ItemListener, ListSelectionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            Object src = e.getSource();
            if (src == buttonNewImage)              addNewImage();
            else if (src == buttonExistingImage)    addExistingImage();
            else if (src == buttonView)             viewImage();
            else if (src == buttonRemoveImage)      removeImage();
            else if (src == buttonCancel)           cancel();
            else if (src == comboBoxTags)           addSelectedTagToTagField();
            else                                    addQuestion();
        }

        @Override
        public void itemStateChanged(ItemEvent e) {
            if (e.getSource() == checkboxMultipleChoice)
                multChoiceToggle();
        }

        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (e.getSource() == listImages)
                imageListChanged();
        }
        
    }
}
